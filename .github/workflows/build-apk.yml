name: Build Android APK

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.4.0)'
        required: false
        default: '1.4.0'
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK Environment
      run: |
        # 设置Android SDK环境变量
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "$ANDROID_SDK_ROOT/build-tools/34.0.0" >> $GITHUB_PATH
        
        # 检查SDK环境
        echo "Android SDK Root: $ANDROID_SDK_ROOT"
        ls -la $ANDROID_SDK_ROOT/ || echo "SDK directory listing failed"
        
        # 检查并安装必要的SDK组件
        echo "Checking SDK components..."
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --list_installed || echo "Failed to list installed components"
        
        # 安装必要的组件（如果不存在）
        echo "Installing required SDK components..."
        yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses || echo "License acceptance failed"
        $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager "platform-tools" "build-tools;34.0.0" "platforms;android-34" || echo "Component installation failed"
        
        # 验证安装
        echo "Verifying installation..."
        ls -la $ANDROID_SDK_ROOT/build-tools/ || echo "Build tools not found"
        ls -la $ANDROID_SDK_ROOT/platforms/ || echo "Platforms not found"
        
    - name: Install Cordova CLI
      run: |
        npm install -g cordova@latest
        cordova telemetry off
        
    - name: Create Cordova project
      run: |
        cordova create thecodexwalker com.thecodexwalker.app "The Codex Walker"
        
    - name: Copy web assets to Cordova www
      run: |
        # 清空www目录
        rm -rf thecodexwalker/www/*
        
        # 复制主项目文件到www目录
        cp index.html thecodexwalker/www/
        cp game.html thecodexwalker/www/
        cp about.html thecodexwalker/www/
        cp ending_credits.html thecodexwalker/www/
        cp style.css thecodexwalker/www/
        cp -r css thecodexwalker/www/
        cp -r js thecodexwalker/www/
        cp -r data thecodexwalker/www/
        cp -r game thecodexwalker/www/
        
    - name: Add Android platform
      working-directory: thecodexwalker
      run: cordova platform add android@12.0.1
        
    - name: Configure config.xml
      working-directory: thecodexwalker
      run: |
        # 更新config.xml以支持whitelist插件
        cat > config.xml << 'EOF'
        <?xml version='1.0' encoding='utf-8'?>
        <widget id="com.thecodexwalker.app" version="1.4.0" xmlns="http://www.w3.org/ns/widgets" xmlns:cdv="http://cordova.apache.org/ns/1.0">
            <name>The Codex Walker</name>
            <description>万象行者 - 一个互动式视觉小说游戏</description>
            <author email="dev@thecodexwalker.com" href="https://github.com/chenxing3060/thecodexwalker">
                The Codex Walker Team
            </author>
            <content src="index.html" />
            <access origin="*" />
            <allow-intent href="http://*/*" />
            <allow-intent href="https://*/*" />
            <allow-intent href="tel:*" />
            <allow-intent href="sms:*" />
            <allow-intent href="mailto:*" />
            <allow-intent href="geo:*" />
            <platform name="android">
                <allow-intent href="market:*" />
                <preference name="android-minSdkVersion" value="22" />
                <preference name="android-targetSdkVersion" value="34" />
            </platform>
            <preference name="DisallowOverscroll" value="true" />
            <preference name="android-minSdkVersion" value="22" />
            <preference name="android-targetSdkVersion" value="34" />
            <preference name="SplashMaintainAspectRatio" value="true" />
            <preference name="FadeSplashScreenDuration" value="300" />
            <preference name="SplashShowOnlyFirstTime" value="false" />
            <preference name="SplashScreen" value="screen" />
            <preference name="SplashScreenDelay" value="3000" />
        </widget>
        EOF
        
    - name: Install Cordova plugins
      working-directory: thecodexwalker
      run: |
        cordova plugin add cordova-plugin-whitelist@1.3.5
        cordova plugin add cordova-plugin-splashscreen@6.0.2
        cordova plugin add cordova-plugin-statusbar@4.0.0
        cordova plugin add cordova-plugin-device@2.1.0
        
    - name: Configure Android build
      working-directory: thecodexwalker
      run: |
        # 等待平台添加完成
        sleep 5
        
        # 确保目录存在
        mkdir -p platforms/android/app
        mkdir -p platforms/android/gradle/wrapper
        
        # 创建自定义的build-extras.gradle来解决编译问题
        cat > platforms/android/app/build-extras.gradle << 'EOF'
        android {
            compileSdkVersion 34
            buildToolsVersion "34.0.0"
            
            defaultConfig {
                minSdkVersion 22
                targetSdkVersion 34
                versionCode 140
                versionName "1.4.0"
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_17
                targetCompatibility JavaVersion.VERSION_17
            }
            
            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libjsc.so'
                exclude 'META-INF/DEPENDENCIES'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/NOTICE.txt'
            }
            
            lintOptions {
                abortOnError false
                checkReleaseBuilds false
            }
        }
        
        // 添加必要的依赖来解决XmlParser问题
        dependencies {
            implementation 'org.apache.commons:commons-lang3:3.12.0'
            implementation 'org.codehaus.groovy:groovy-xml:3.0.9'
        }
        EOF
        
        # 创建gradle.properties文件来配置Gradle
        cat > platforms/android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx3072m -Dfile.encoding=UTF-8 -XX:+UseG1GC
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.daemon=false
        org.gradle.configureondemand=false
        org.gradle.parallel=false
        org.gradle.caching=false
        android.builder.sdkDownload=true
        EOF
        
        # 配置Gradle Wrapper版本（使用与Cordova Android 12.0.1兼容的版本）
        if [ -f platforms/android/gradle/wrapper/gradle-wrapper.properties ]; then
          sed -i 's/gradle-.*-all.zip/gradle-8.4-all.zip/g' platforms/android/gradle/wrapper/gradle-wrapper.properties
        else
          # 如果文件不存在，创建一个
          cat > platforms/android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        fi
        
        # 创建自定义的cordova.gradle文件来解决XmlParser问题
        if [ -f platforms/android/CordovaLib/cordova.gradle ]; then
          # 备份原文件
          cp platforms/android/CordovaLib/cordova.gradle platforms/android/CordovaLib/cordova.gradle.backup
          
          # 在文件开头添加必要的导入
          cat > platforms/android/CordovaLib/cordova.gradle << 'EOF'
        import groovy.util.XmlParser
        import groovy.util.XmlSlurper
        import groovy.xml.XmlUtil
        
        EOF
          
          # 将原文件内容追加到新文件
          cat platforms/android/CordovaLib/cordova.gradle.backup >> platforms/android/CordovaLib/cordova.gradle
        fi
        
    - name: Update version in config.xml
      working-directory: thecodexwalker
      run: |
        VERSION="${{ github.event.inputs.version || '1.4.0' }}"
        VERSION_CODE=$(echo $VERSION | sed 's/\.//g')
        sed -i "s/version=\"[^\"]*\"/version=\"$VERSION\"/g" config.xml
        sed -i "s/android-versionCode=\"[^\"]*\"/android-versionCode=\"$VERSION_CODE\"/g" config.xml
        
    - name: Build APK
      working-directory: thecodexwalker
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
        if [ "$BUILD_TYPE" = "release" ]; then
          cordova build android --release
        else
          cordova build android --debug
        fi
        
    - name: Find APK files
      id: find_apk
      working-directory: thecodexwalker
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
        if [ "$BUILD_TYPE" = "release" ]; then
          APK_PATH=$(find platforms/android/app/build/outputs/apk/release -name "*.apk" | head -1)
          APK_NAME="thecodexwalker-release.apk"
        else
          APK_PATH=$(find platforms/android/app/build/outputs/apk/debug -name "*.apk" | head -1)
          APK_NAME="thecodexwalker-debug.apk"
        fi
        echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
        echo "apk_name=$APK_NAME" >> $GITHUB_OUTPUT
        
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.find_apk.outputs.apk_name }}
        path: thecodexwalker/${{ steps.find_apk.outputs.apk_path }}
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version && format('v{0}', github.event.inputs.version) || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## 万象行者 - The Codex Walker
          
          ### 更新内容
          - 自动构建的Android APK
          - 版本: ${{ github.event.inputs.version || github.ref_name }}
          - 构建类型: ${{ github.event.inputs.build_type || 'release' }}
          
          ### 安装说明
          1. 下载对应的APK文件
          2. 在Android设备上启用"未知来源"安装
          3. 安装APK文件
          
          ### 在线体验
          [GitHub Pages版本](https://chenxing3060.github.io/thecodexwalker/game.html)
        files: |
          thecodexwalker/${{ steps.find_apk.outputs.apk_path }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}