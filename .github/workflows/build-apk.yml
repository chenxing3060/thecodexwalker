name: Build Android APK

on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]
    workflow_dispatch:

jobs:
    build:
        runs-on: ubuntu-latest
        
        steps:
        - name: Checkout code
          uses: actions/checkout@v4
          
        - name: Setup Node.js
          uses: actions/setup-node@v4
          with:
              node-version: '18'
              
        - name: Install Cordova CLI
          run: npm install -g cordova@11.0.0
          
        - name: Setup Java
          uses: actions/setup-java@v4
          with:
              distribution: 'temurin'
              java-version: '17'
              
        - name: Setup Android SDK manually
          run: |
              # 手动设置Android SDK环境变量
              export ANDROID_HOME="$HOME/android-sdk"
              export ANDROID_SDK_ROOT="$HOME/android-sdk"
              
              # 创建Android SDK目录
              mkdir -p $ANDROID_HOME
              
              # 下载Android SDK命令行工具
              wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
              unzip -q commandlinetools-linux-8512546_latest.zip
              
              # 创建正确的目录结构
              mkdir -p $ANDROID_HOME/cmdline-tools
              mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest
              
              # 设置环境变量
              echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
              echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
              echo "$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/32.0.0" >> $GITHUB_PATH
              
        - name: Install Android SDK components
          run: |
              export ANDROID_HOME="$HOME/android-sdk"
              export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/32.0.0"
              
              # 检查sdkmanager是否存在
              ls -la $ANDROID_HOME/cmdline-tools/latest/bin/
              
              # 接受许可证
              yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
              
              # 安装必要的SDK组件
              $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-32" "build-tools;32.0.0" "platform-tools"
              
        - name: Setup Android environment
          run: |
              echo "ANDROID_HOME=$ANDROID_HOME"
              echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
              echo "JAVA_HOME=$JAVA_HOME"
              echo "PATH includes Android tools:"
              echo $PATH | tr ':' '\n' | grep android
              
        - name: Force Gradle version
          run: |
              # 强制下载并使用Gradle 7.6.1
              wget https://services.gradle.org/distributions/gradle-7.6.1-bin.zip
              unzip -q gradle-7.6.1-bin.zip
              export PATH="$PWD/gradle-7.6.1/bin:$PATH"
              echo "GRADLE_HOME=$PWD/gradle-7.6.1" >> $GITHUB_ENV
              echo "$PWD/gradle-7.6.1/bin" >> $GITHUB_PATH
              gradle --version
              
        - name: Initialize Cordova project
          run: |
              cordova create temp-project com.thecodexwalker.game "The Codex Walker"
              cp -r temp-project/* .
              cp -r temp-project/.* . 2>/dev/null || true
              rm -rf temp-project
              
              # 创建www目录结构
              mkdir -p www
              
              # 复制游戏文件到www目录
              echo "Copying game files to www directory..."
              cp -r *.html www/ 2>/dev/null || true
              cp -r css/ www/ 2>/dev/null || true
              cp -r js/ www/ 2>/dev/null || true
              cp -r data/ www/ 2>/dev/null || true
              cp -r game/ www/ 2>/dev/null || true
              cp -r style.css www/ 2>/dev/null || true
              
              # 显示www目录内容
              echo "www directory contents:"
              ls -la www/
              echo "www/css contents:"
              ls -la www/css/ 2>/dev/null || echo "No css directory"
              echo "www/js contents:"
              ls -la www/js/ 2>/dev/null || echo "No js directory"
              echo "www/data contents:"
              ls -la www/data/ 2>/dev/null || echo "No data directory"
              echo "www/game contents:"
              ls -la www/game/ 2>/dev/null || echo "No game directory"
              
        - name: Generate APK Icons
          run: |
              echo "🎨 开始生成Android APK图标..."
              
              # 检查原图是否存在
              if [ ! -f "jimeng-2025-08-20-2954-安卓游戏logo，科技与奇幻元素，文字_万物行者__副本.png" ]; then
                  echo "❌ 原图文件不存在！"
                  exit 1
              fi
              
              # 创建图标目录
              mkdir -p res/icon/android
              mkdir -p res/screen/android
              
              # 安装ImageMagick
              echo "📦 安装ImageMagick..."
              sudo apt-get update
              sudo apt-get install -y imagemagick
              
              # 生成各种尺寸的图标
              echo "🔄 生成图标文件..."
              
              # 图标尺寸列表
              declare -a icon_sizes=("36" "48" "72" "96" "144" "192")
              declare -a density_names=("ldpi" "mdpi" "hdpi" "xhdpi" "xxhdpi" "xxxhdpi")
              
              for i in "${!icon_sizes[@]}"; do
                  size="${icon_sizes[$i]}"
                  density="${density_names[$i]}"
                  
                  echo "生成 ${density} 图标 (${size}x${size})..."
                  convert "jimeng-2025-08-20-2954-安卓游戏logo，科技与奇幻元素，文字_万物行者__副本.png" \
                      -resize "${size}x${size}" \
                      -background transparent \
                      -gravity center \
                      -extent "${size}x${size}" \
                      "res/icon/android/drawable-${density}-icon.png"
              done
              
              # 生成启动画面
              echo "🔄 生成启动画面..."
              
              # 启动画面尺寸列表
              declare -a screen_sizes=("320x426" "320x470" "480x640" "480x800" "720x960" "720x1280")
              declare -a screen_densities=("port-ldpi" "port-mdpi" "port-hdpi" "port-xhdpi" "port-xxhdpi" "port-xxxhdpi")
              
              for i in "${!screen_sizes[@]}"; do
                  size="${screen_sizes[$i]}"
                  density="${screen_densities[$i]}"
                  
                  echo "生成 ${density} 启动画面 (${size})..."
                  convert "jimeng-2025-08-20-2954-安卓游戏logo，科技与奇幻元素，文字_万物行者__副本.png" \
                      -resize "${size}" \
                      -background "linear-gradient(135deg, #667eea 0%, #764ba2 100%)" \
                      -gravity center \
                      -extent "${size}" \
                      "res/screen/android/screen-${density}.png"
              done
              
              echo "✅ 图标生成完成！"
              echo "📁 图标文件位置: res/icon/android/"
              echo "📁 启动画面位置: res/screen/android/"
              echo "📏 生成的文件:"
              ls -la res/icon/android/
              ls -la res/screen/android/
              
        - name: Add Android platform
          run: |
              if [ -d "platforms/android" ]; then
                  echo "移除现有的Android平台..."
                  cordova platform remove android
              fi
              
              echo "添加Android平台..."
              cordova platform add android@11.0.0
              
              echo "Android平台添加完成！"
              ls -la platforms/
              
        - name: Configure Cordova Icons
          run: |
              echo "🔧 配置Cordova图标..."
              
              # 等待Android平台完全初始化
              sleep 5
              
              # 检查目录结构
              echo "检查目录结构..."
              ls -la platforms/android/app/src/main/res/ 2>/dev/null || echo "Android res目录不存在"
              
              # 复制图标到Cordova项目
              if [ -d "res/icon/android" ] && [ -d "platforms/android/app/src/main/res" ]; then
                  echo "复制图标文件..."
                  
                  # 创建正确的目录结构
                  mkdir -p platforms/android/app/src/main/res/drawable-ldpi
                  mkdir -p platforms/android/app/src/main/res/drawable-mdpi
                  mkdir -p platforms/android/app/src/main/res/drawable-hdpi
                  mkdir -p platforms/android/app/src/main/res/drawable-xhdpi
                  mkdir -p platforms/android/app/src/main/res/drawable-xxhdpi
                  mkdir -p platforms/android/app/src/main/res/drawable-xxxhdpi
                  
                  # 复制图标到对应目录
                  cp res/icon/android/drawable-ldpi-icon.png platforms/android/app/src/main/res/drawable-ldpi/icon.png
                  cp res/icon/android/drawable-mdpi-icon.png platforms/android/app/src/main/res/drawable-mdpi/icon.png
                  cp res/icon/android/drawable-hdpi-icon.png platforms/android/app/src/main/res/drawable-hdpi/icon.png
                  cp res/icon/android/drawable-xhdpi-icon.png platforms/android/app/src/main/res/drawable-xhdpi/icon.png
                  cp res/icon/android/drawable-xxhdpi-icon.png platforms/android/app/src/main/res/drawable-xxhdpi/icon.png
                  cp res/icon/android/drawable-xxxhdpi-icon.png platforms/android/app/src/main/res/drawable-xxxhdpi/icon.png
                  
                  echo "图标复制完成！"
                  ls -la platforms/android/app/src/main/res/drawable-*/
                  
                  # 验证图标文件
                  echo "验证图标文件..."
                  find platforms/android/app/src/main/res/drawable-* -name "icon.png" -exec ls -la {} \;
                  
                  # 检查config.xml中的图标配置
                  echo "检查config.xml图标配置..."
                  if [ -f "config.xml" ]; then
                      echo "config.xml内容:"
                      cat config.xml
                  fi
                  
                  # 强制更新图标配置
                  echo "强制更新图标配置..."
                  sed -i 's/<icon src="res\/icon\/android\/drawable-ldpi-icon.png" density="ldpi" \/>/<icon src="res\/icon\/android\/drawable-ldpi-icon.png" density="ldpi" \/>/g' config.xml
                  sed -i 's/<icon src="res\/icon\/android\/drawable-mdpi-icon.png" density="mdpi" \/>/<icon src="res\/icon\/android\/drawable-mdpi-icon.png" density="mdpi" \/>/g' config.xml
                  sed -i 's/<icon src="res\/icon\/android\/drawable-hdpi-icon.png" density="hdpi" \/>/<icon src="res\/icon\/android\/drawable-hdpi-icon.png" density="hdpi" \/>/g' config.xml
                  sed -i 's/<icon src="res\/icon\/android\/drawable-xhdpi-icon.png" density="xhdpi" \/>/<icon src="res\/icon\/android\/drawable-xhdpi-icon.png" density="xhdpi" \/>/g' config.xml
                  sed -i 's/<icon src="res\/icon\/android\/drawable-xxhdpi-icon.png" density="xxhdpi" \/>/<icon src="res\/icon\/android\/drawable-xxhdpi-icon.png" density="xxhdpi" \/>/g' config.xml
                  sed -i 's/<icon src="res\/icon\/android\/drawable-xxxhdpi-icon.png" density="xxxhdpi" \/>/<icon src="res\/icon\/android\/drawable-xxxhdpi-icon.png" density="xxxhdpi" \/>/g' config.xml
                  
                  echo "图标配置更新完成！"
                  
                  # 确保图标在AndroidManifest.xml中被正确引用
                  echo "检查AndroidManifest.xml..."
                  if [ -f "platforms/android/app/src/main/AndroidManifest.xml" ]; then
                      echo "AndroidManifest.xml内容:"
                      cat platforms/android/app/src/main/AndroidManifest.xml
                      
                      # 确保图标引用正确
                      echo "更新AndroidManifest.xml中的图标引用..."
                      sed -i 's/android:icon="@drawable\/icon"/android:icon="@drawable\/icon"/g' platforms/android/app/src/main/AndroidManifest.xml
                      sed -i 's/android:roundIcon="@drawable\/icon"/android:roundIcon="@drawable\/icon"/g' platforms/android/app/src/main/AndroidManifest.xml
                      
                      echo "AndroidManifest.xml更新完成！"
                  fi
                  
              else
                  echo "❌ 图标目录或Android平台目录不存在！"
                  echo "res/icon/android 存在: $([ -d "res/icon/android" ] && echo "是" || echo "否")"
                  echo "platforms/android/app/src/main/res 存在: $([ -d "platforms/android/app/src/main/res" ] && echo "是" || echo "否")"
              fi
              
        - name: Configure Gradle compatibility
          run: |
              # 创建gradle.properties文件（移除已弃用的选项）
              cat > platforms/android/gradle.properties << EOF
              org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
              android.useAndroidX=true
              android.enableJetifier=true
              android.enableR8.fullMode=false
              android.enableR8=true
              org.gradle.parallel=true
              org.gradle.caching=true
              org.gradle.configureondemand=true
              EOF
              
              # 创建gradle-wrapper.properties文件
              mkdir -p platforms/android/gradle/wrapper
              cat > platforms/android/gradle/wrapper/gradle-wrapper.properties << EOF
              distributionBase=GRADLE_USER_HOME
              distributionPath=wrapper/dists
              distributionUrl=https\://services.gradle.org/distributions/gradle-7.6.1-bin.zip
              zipStoreBase=GRADLE_USER_HOME
              zipStorePath=wrapper/dists
              EOF
              
              # 创建build.gradle文件覆盖
              cat > platforms/android/build.gradle << EOF
              buildscript {
                  repositories {
                      google()
                      mavenCentral()
                  }
                  dependencies {
                      classpath 'com.android.tools.build:gradle:7.4.2'
                  }
              }
              
              allprojects {
                  repositories {
                      google()
                      mavenCentral()
                  }
              }
              EOF
              
              # 强制使用我们的Gradle版本
              echo '#!/bin/bash' > platforms/android/gradlew
              echo 'export GRADLE_HOME="$GITHUB_WORKSPACE/gradle-7.6.1"' >> platforms/android/gradlew
              echo 'export PATH="$GITHUB_WORKSPACE/gradle-7.6.1/bin:$PATH"' >> platforms/android/gradlew
              echo 'exec "$GITHUB_WORKSPACE/gradle-7.6.1/bin/gradle" "$@"' >> platforms/android/gradlew
              chmod +x platforms/android/gradlew
              
        - name: Install dependencies
          run: npm install
          
        - name: Add Cordova plugins
          run: |
              # 移除不兼容的whitelist插件，使用更现代的插件
              cordova plugin add cordova-plugin-file@6.0.2
              cordova plugin add cordova-plugin-media@5.0.1
              cordova plugin add cordova-plugin-splashscreen@6.0.0
              cordova plugin add cordova-plugin-statusbar@3.0.0
              cordova plugin add cordova-plugin-inappbrowser@5.0.0
              
        - name: Build Android APK
          run: |
              export GRADLE_HOME="$GITHUB_WORKSPACE/gradle-7.6.1"
              export PATH="$GITHUB_WORKSPACE/gradle-7.6.1/bin:$PATH"
              cordova build android --verbose
              
        - name: Upload APK artifact
          uses: actions/upload-artifact@v4
          with:
              name: thecodexwalker-apk
              path: platforms/android/app/build/outputs/apk/debug/app-debug.apk
              
        - name: Build Release APK
          run: |
              echo "🔨 构建Release APK..."
              
              # 确保游戏文件在www目录中
              echo "检查www目录内容..."
              ls -la www/
              echo "www目录大小: $(du -sh www/)"
              
              # 清理之前的构建
              echo "清理之前的构建..."
              rm -rf platforms/android/app/build/
              
              # 使用Cordova构建，这是最可靠的方法
              echo "使用Cordova构建Release APK..."
              cordova build android --release --verbose
              
              # 检查构建结果
              echo "检查构建结果..."
              ls -la platforms/android/app/build/outputs/
              
              # 查找生成的APK文件
              if [ -f "platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
                  echo "✅ Release APK构建成功！"
                  ls -la platforms/android/app/build/outputs/apk/release/
                  echo "Release APK大小: $(du -h platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk)"
                  
                  # 验证APK文件完整性
                  echo "验证APK文件完整性..."
                  file platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk
                  
                  # 检查ZIP结构
                  echo "检查ZIP结构..."
                  unzip -t platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk
                  
                  # 检查APK内容
                  echo "检查APK内容..."
                  unzip -l platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk | head -20
                  
                  # 将APK复制到项目根目录
                  cp platforms/android/app/build/outputs/apk/release/app-release-unsigned.apk app-release-unsigned.apk
                  echo "APK已复制到项目根目录"
                  ls -la app-release-unsigned.apk
                  
                  # 验证复制的文件
                  echo "验证复制的APK文件..."
                  file app-release-unsigned.apk
                  unzip -t app-release-unsigned.apk
                  
              elif [ -f "platforms/android/app/build/outputs/bundle/release/app-release.aab" ]; then
                  echo "✅ AAB文件构建成功，转换为APK..."
                  ls -la platforms/android/app/build/outputs/bundle/release/
                  
                  # 下载bundletool
                  wget https://github.com/google/bundletool/releases/download/1.17.2/bundletool-all-1.17.2.jar
                  
                  # 生成通用APK（不是APKS）
                  echo "生成通用APK..."
                  java -jar bundletool-all-1.17.2.jar build-apks --bundle=platforms/android/app/build/outputs/bundle/release/app-release.aab --output=app-release.apks --mode=universal
                  
                  # 重命名为APK
                  mv app-release.apks app-release.apk
                  echo "AAB转换为APK完成"
                  ls -la app-release.apk
                  
                  # 验证转换后的APK
                  echo "验证转换后的APK..."
                  file app-release.apk
                  unzip -t app-release.apk
                  
              else
                  echo "❌ 构建失败，尝试Debug版本..."
                  cordova build android --debug --verbose
                  
                  if [ -f "platforms/android/app/build/outputs/apk/debug/app-debug.apk" ]; then
                      echo "✅ Debug APK构建成功！"
                      ls -la platforms/android/app/build/outputs/apk/debug/
                      echo "Debug APK大小: $(du -h platforms/android/app/build/outputs/apk/debug/app-debug.apk)"
                      
                      # 验证Debug APK
                      echo "验证Debug APK..."
                      file platforms/android/app/build/outputs/apk/debug/app-debug.apk
                      unzip -t platforms/android/app/build/outputs/apk/debug/app-debug.apk
                      
                      # 检查Debug APK是否包含自定义图标
                      echo "检查Debug APK中的图标..."
                      unzip -l platforms/android/app/build/outputs/apk/debug/app-debug.apk | grep -i "icon\|drawable" || echo "未找到图标相关文件"
                      
                      # 复制Debug APK
                      cp platforms/android/app/build/outputs/apk/debug/app-debug.apk app-debug.apk
                      echo "Debug APK已复制到项目根目录"
                      
                      # 验证复制的Debug APK
                      echo "验证复制的Debug APK..."
                      file app-debug.apk
                      unzip -t app-debug.apk
                  else
                      echo "❌ 所有构建都失败了！"
                      exit 1
                  fi
              fi
              
              # 签名APK文件
              if [ -f "app-release-unsigned.apk" ]; then
                  echo "🔐 签名Release APK..."
                  
                  # 生成更安全的签名密钥
                  echo "生成签名密钥..."
                  keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US" -keyalg RSA -sigalg SHA256withRSA
                  
                  # 验证密钥库
                  echo "验证密钥库..."
                  keytool -list -keystore my-release-key.keystore -storepass android
                  
                  # 签名APK
                  echo "开始签名APK..."
                  jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA256 -keystore my-release-key.keystore -storepass android -keypass android app-release-unsigned.apk alias_name
                  
                  # 验证签名
                  echo "验证APK签名..."
                  jarsigner -verify -verbose -certs app-release-unsigned.apk
                  
                  # 使用zipalign优化
                  echo "优化APK文件..."
                  $ANDROID_HOME/build-tools/32.0.0/zipalign -v 4 app-release-unsigned.apk thecodexwalker-release.apk
                  
                  echo "✅ 签名完成: thecodexwalker-release.apk"
                  ls -la thecodexwalker-release.apk
                  echo "APK大小: $(du -h thecodexwalker-release.apk)"
                  
                  # 最终验证
                  echo "最终验证APK..."
                  file thecodexwalker-release.apk
                  unzip -t thecodexwalker-release.apk
                  
                  # 检查APK内容
                  echo "检查最终APK内容..."
                  unzip -l thecodexwalker-release.apk | head -20
                  
              elif [ -f "app-release.apk" ]; then
                  echo "🔐 签名转换后的APK..."
                  
                  # 生成签名密钥
                  keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
                  
                  # 签名APK
                  jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA256 -keystore my-release-key.keystore -storepass android -keypass android app-release.apk alias_name
                  
                  # 验证签名
                  jarsigner -verify -verbose -certs app-release.apk
                  
                  # 重命名
                  mv app-release.apk thecodexwalker-release.apk
                  echo "✅ 签名完成: thecodexwalker-release.apk"
                  
                  # 验证最终APK
                  echo "验证最终APK..."
                  file thecodexwalker-release.apk
                  unzip -t thecodexwalker-release.apk
                  
              elif [ -f "app-debug.apk" ]; then
                  echo "🔐 签名Debug APK..."
                  
                  # 生成签名密钥
                  keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=Android Debug,O=Android,C=US"
                  
                  # 签名Debug APK
                  jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA256 -keystore my-release-key.keystore -storepass android -keypass android app-debug.apk alias_name
                  
                  # 验证签名
                  jarsigner -verify -verbose -certs app-debug.apk
                  
                  # 重命名
                  mv app-debug.apk thecodexwalker-debug.apk
                  echo "✅ Debug APK签名完成: thecodexwalker-debug.apk"
                  
                  # 验证最终APK
                  echo "验证最终APK..."
                  file thecodexwalker-debug.apk
                  unzip -t thecodexwalker-debug.apk
                  
              else
                  echo "❌ 没有找到可签名的APK文件"
                  echo "当前目录文件列表:"
                  ls -la
                  exit 1
              fi
              
              # 最终检查
              echo "🎯 最终检查..."
              if [ -f "thecodexwalker-release.apk" ]; then
                  echo "✅ Release APK生成成功！"
                  echo "文件: thecodexwalker-release.apk"
                  echo "大小: $(du -h thecodexwalker-release.apk)"
                  echo "类型: $(file thecodexwalker-release.apk)"
                  
                  # 最终ZIP结构验证
                  echo "最终ZIP结构验证..."
                  unzip -t thecodexwalker-release.apk
                  
              elif [ -f "thecodexwalker-debug.apk" ]; then
                  echo "✅ Debug APK生成成功！"
                  echo "文件: thecodexwalker-debug.apk"
                  echo "大小: $(du -h thecodexwalker-debug.apk)"
                  echo "类型: $(file thecodexwalker-debug.apk)"
                  
                  # 最终ZIP结构验证
                  echo "最终ZIP结构验证..."
                  unzip -t thecodexwalker-debug.apk
                  
              else
                  echo "❌ 没有生成有效的APK文件"
                  exit 1
              fi
              
        - name: Upload Release APK
          uses: actions/upload-artifact@v4
          with:
              name: thecodexwalker-release-apk
              path: thecodexwalker-release.apk
